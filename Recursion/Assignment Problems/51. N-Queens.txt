class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][]board = new char[n][n];
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j] = '.';
            }
        }
        
        List<List<String>> result = new ArrayList<>();
        helper(0,board,result);
        return result;
    }
    
    void helper(int row,char[][]board,List<List<String>>result){
        if(row == board.length){
            List<String> list = new ArrayList<>();
            for(int i=0;i<board.length;i++){
                String s = new String(board[i]);
                list.add(s);
            }
            result.add(list);
            return;
        }
        
        for(int col=0;col<board.length;col++){
            if(validate(board,row,col) == true){
                board[row][col] = 'Q';
                helper(row+1,board,result);
                board[row][col] = '.';
            }
        }
    }
    
    boolean validate(char[][]board,int row,int col){
        for(int i=row-1,j=col ; i>=0;i--){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        
        for(int i=row-1,j=col-1;i>=0&&j>=0;i--,j--){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        
        for(int i=row-1,j=col+1;i>=0&&j<board.length;i--,j++){
            if(board[i][j] == 'Q'){
                return false;
            }
        }
        return true;
    }
}


