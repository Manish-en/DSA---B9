class Solution
{
    
    static long count = 0;
    static long inversionCount(long arr[], long N)
    {
        count = 0;
        // Your Code Here
        mergesort(arr,0,N-1);
        return count;
    }
    
    public static long[] mergesort(long[]arr,long low,long high){
        if(low == high){
            long[]bs = new long[1];
            bs[0] = arr[(int)low];
            return bs;
        }
        
        long mid = (low + high)/2;
        
        long[]left = mergesort(arr,low,mid);
        long[]right = mergesort(arr,mid+1,high);
        
        long[]ans = mergeSortedArrays(left,right);
        
        return ans;
    }
    
    public static long[] mergeSortedArrays(long[]left,long[]right){
        long[]ans = new long[left.length + right.length];
        int i = 0;
        int j = 0;;
        int k = 0;
        
        while(i<left.length && j<right.length){
            if(left[i] <= right[j]){
                ans[k] = left[i];
                i++;
                k++;
            }else{
                count += (left.length - i);
                ans[k] = right[j];
                j++;
                k++;
            }
        }
        
        while(i < left.length){
            ans[k] = left[i];
            i++;
            k++;
        }
        
        while(j < right.length){
            ans[k] = right[j];
            j++;
            k++;
        }
        
        return ans;
       
    }
}